using System.Xml.Linq;

namespace ej_de_ordenamiento_teoria
{
    // Una empresa realiz√≥ una encuesta de satisfacci√≥n sobre un producto a 15 clientes, 
//    donde cada cliente calific√≥ el producto con un puntaje entero entre 1 y 10. Se desea
//analizar los resultados.Nos encargaron crear un programa en C# que permita cargar los 
//nombres de los clientes y sus calificaciones al producto, para luego generar la siguiente
//informaci√≥n:
// ‚óè Implementar un procedimiento llamado OrdenarBurbuja(int[] aCalificaciones,
//string[] aNombres, bool creciente)que implemente el ordenamiento burbuja
//para modificar la secuencia de elementos en ambos arreglos a la vez, considerando
//el orden deseado para las calificaciones, el par√°metro booleano determina el tipo de
//ordenamiento creciente/decreciente.
// ‚óè Mostrar la lista de clientes con las calificaciones de menor a mayor
// ‚óè Mostrar quien le dio el menor puntaje al producto
// ‚óè Mostrar quien le dio el mayor puntaje al producto
// ‚óè Determinar si hubo(o no) calificaciones repetidas

    using System;

    class Programa
    {
        static void Menu()
        {
            Console.WriteLine("Seleccione una opci√≥n:");
            Console.WriteLine("1 - Cargar calificaciones de los clientes");
            Console.WriteLine("2 - Ver la mejor calificaci√≥n");
            Console.WriteLine("3 - Ver la menor calificaci√≥n");
            Console.WriteLine("4 - Ver si hubo calificaciones repetidas");
            Console.WriteLine("5 - Ver listado completo");
            Console.WriteLine("0 - Salir");
        }

        static void Cargar(out int[] calificaciones, out string[] nombres)
        {
            int cantidad = 15;
            calificaciones = new int[cantidad];
            nombres = new string[cantidad];

            for (int i = 0; i < cantidad; i++)
            {
                Console.Write($"Ingrese nombre del cliente {i + 1}: ");
                nombres[i] = Console.ReadLine();
                calificaciones[i] = PedirCalificacion(i + 1);
            }
        }

        static int PedirCalificacion(int numeroCliente)
        {
            int calificacion;
            Console.Write($"Ingrese calificaci√≥n del cliente {numeroCliente}: ");

            while (!int.TryParse(Console.ReadLine(), out calificacion) || calificacion < 0 || calificacion > 10)
            {
                Console.WriteLine(" Calificaci√≥n inv√°lida. Ingrese un n√∫mero del 0 al 10.");
            }

            return calificacion;
        }

        static void MostrarListado(int[] calificaciones, string[] nombres)
        {
            Console.WriteLine("\nüìã Listado de calificaciones:");
            for (int i = 0; i < calificaciones.Length; i++)
            {
                Console.WriteLine($"{nombres[i]} ‚Üí {calificaciones[i]}");
            }
        }

        static void Main(string[] args)
        {
            int[] aCalificacion = new int[15];
            string[] aNombres = new string[15];
            bool datosCargados = false;
            string opcion;

            do
            {
                Menu();
                opcion = Console.ReadLine();

                switch (opcion)
                {
                    case "1":
                        Cargar(out aCalificacion, out aNombres);
                        datosCargados = true;
                        break;

                    case "2":
                        if (datosCargados)
                            Console.WriteLine($"‚≠ê Mejor calificaci√≥n: {aCalificacion.Max()}");
                        else
                            Console.WriteLine(" Primero debe cargar los datos.");
                        break;

                    case "3":
                        if (datosCargados)
                            Console.WriteLine($" Menor calificaci√≥n: {aCalificacion.Min()}");
                        else
                            Console.WriteLine("Primero debe cargar los datos.");
                        break;

                    case "4":
                        if (datosCargados)
                        {
                            bool hayRepetidos = false;
                            for (int i = 0; i < aCalificacion.Length; i++)
                            {
                                for (int j = i + 1; j < aCalificacion.Length; j++)
                                {
                                    if (aCalificacion[i] == aCalificacion[j])
                                    {
                                        hayRepetidos = true;
                                        break;
                                    }
                                }
                                if (hayRepetidos) break;
                            }

                            Console.WriteLine(hayRepetidos
                                ? "Hay calificaciones repetidas."
                                : " No hay calificaciones repetidas.");
                        }
                        else
                            Console.WriteLine("‚ö†Ô∏è Primero debe cargar los datos.");
                        break;

                    case "5":
                        if (datosCargados)
                            MostrarListado(aCalificacion, aNombres);
                        else
                            Console.WriteLine("Primero debe cargar los datos.");
                        break;

                    case "0":
                        Console.WriteLine(" Fin del programa.");
                        break;

                    default:
                        Console.WriteLine(" Opci√≥n inv√°lida.");
                        break;
                }

                Console.WriteLine(); // L√≠nea en blanco
            }
            while (opcion != "0");
        }
    }
}
